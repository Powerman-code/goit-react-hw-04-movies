{"version":3,"sources":["views/FilmGalleryView/FilmGalleryView.js","views/FilmGalleryView/FilmGalleryView.module.css","views/FilmErrorView/FilmErrorView.js","views/FilmErrorView/FilmErrorView.module.css","views/HomePage/HomePage.module.css","views/HomePage/HomePage.js"],"names":["FilmGalleryView","movies","location","useRouteMatch","url","useLocation","console","log","className","s","list","map","movie","item","to","pathname","id","state","from","link","image","src","POSTER_URL","poster_path","alt","title","width","height","name","movieTitle","original_title","module","exports","FilmErrorView","message","Status","HomePage","useState","setMovies","error","setError","status","setStatus","useEffect","fetchTrendingMovies","then","results","Promise","reject","Error","catch","styles","header","gallery"],"mappings":"6NAIe,SAASA,EAAT,GAAsC,IAAXC,EAAU,EAAVA,OAElCC,GADUC,cAARC,IACSC,eAIjB,OADAC,QAAQC,IAAIN,GAEV,mCACGA,GACC,oBAAIO,UAAWC,IAAEC,KAAjB,SACGT,EAAOU,KAAI,SAAAC,GAAK,OACf,oBAAmBJ,UAAWC,IAAEI,KAAhC,SACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,UAAD,OAAYH,EAAMI,IAC1BC,MAAO,CAAEC,KAAMhB,IAEjBM,UAAWC,IAAEU,KALf,UAOE,qBACEX,UAAWC,IAAEW,MACbC,IAAKC,IAAaV,EAAMW,YACxBC,IAAKZ,EAAMa,MACXC,MAAM,MACNC,OAAO,QAERf,EAAMgB,MACL,oBAAGpB,UAAWC,IAAEoB,WAAhB,+DAAuCjB,EAAMgB,QAE9ChB,EAAMa,OACL,oBAAGjB,UAAWC,IAAEoB,WAAhB,+DAAuCjB,EAAMa,SAE9Cb,EAAMkB,gBACL,oBAAGtB,UAAWC,IAAEoB,WAAhB,wIAC0BjB,EAAMkB,sBAvB7BlB,EAAMI,a,mBCd3Be,EAAOC,QAAU,CAAC,KAAO,8BAA8B,KAAO,8BAA8B,KAAO,8BAA8B,MAAQ,+BAA+B,WAAa,sC,8FCAtK,SAASC,EAAT,GAAqC,IAAZC,EAAW,EAAXA,QAEtC,OADA5B,QAAQC,IAAI2B,GACL,oBAAI1B,UAAWC,IAAEyB,QAAjB,SAA2BA,M,mBCFpCH,EAAOC,QAAU,CAAC,QAAU,iC,mBCA5BD,EAAOC,QAAU,CAAC,OAAS,2B,kKCQrBG,EACK,UADLA,EAEM,WAFNA,EAGM,WAGG,SAASC,IAAY,IAAD,EACLC,mBAAS,IADJ,mBAC1BpC,EAD0B,KAClBqC,EADkB,OAEPD,mBAAS,MAFF,mBAE1BE,EAF0B,KAEnBC,EAFmB,OAGLH,mBAASF,GAHJ,mBAG1BM,EAH0B,KAGlBC,EAHkB,KA4BjC,OAvBAC,qBAAU,WACJ1C,IAAW,KAGfyC,EAAUP,GACVS,cACGC,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACP,IAAIA,EAIF,OAAOC,QAAQC,OAAO,IAAIC,MAAM,qCAHhCP,EAAUP,GACVG,EAAUQ,MAKbI,OAAM,SAAAX,GACLC,EAASD,GACTG,EAAUP,SAEb,IAEH7B,QAAQC,IAAIN,GAGRwC,IAAWN,EACN,cAAC,IAAD,IAGLM,IAAWN,EACN,cAAC,IAAD,CAAeD,QAASK,EAAML,UAGnCO,IAAWN,EAGX,qCACE,wBAAQ3B,UAAW2C,IAAOC,OAA1B,4BACCnD,GACC,cAAC,IAAD,CAAiBO,UAAW2C,IAAOE,QAASpD,OAAQA,YAN5D","file":"static/js/HomePage.15d2750f.chunk.js","sourcesContent":["import { Link, useRouteMatch, useLocation, useHistory } from 'react-router-dom';\nimport s from './FilmGalleryView.module.css';\nimport { POSTER_URL } from '../../services/movies-api';\n\nexport default function FilmGalleryView({ movies }) {\n  const { url } = useRouteMatch();\n  const location = useLocation();\n\n  // console.log(url);\n  console.log(movies);\n  return (\n    <>\n      {movies && (\n        <ul className={s.list}>\n          {movies.map(movie => (\n            <li key={movie.id} className={s.item}>\n              <Link\n                to={{\n                  pathname: `movies/${movie.id}`,\n                  state: { from: location },\n                }}\n                className={s.link}\n              >\n                <img\n                  className={s.image}\n                  src={POSTER_URL + movie.poster_path}\n                  alt={movie.title}\n                  width=\"300\"\n                  height=\"450\"\n                />\n                {movie.name && (\n                  <p className={s.movieTitle}>Название: {movie.name}</p>\n                )}\n                {movie.title && (\n                  <p className={s.movieTitle}>Название: {movie.title}</p>\n                )}\n                {movie.original_title && (\n                  <p className={s.movieTitle}>\n                    Оригинальное название: {movie.original_title}\n                  </p>\n                )}\n              </Link>\n              {/* <Link to={`movies/${movie.id}`} className={s.link}>\n                {movie.original_title}\n              </Link> */}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FilmGalleryView_list__3IKjP\",\"item\":\"FilmGalleryView_item__1JzGI\",\"link\":\"FilmGalleryView_link__1-0JG\",\"image\":\"FilmGalleryView_image__2M80R\",\"movieTitle\":\"FilmGalleryView_movieTitle__2ER8z\"};","import s from './FilmErrorView.module.css';\nexport default function FilmErrorView({ message }) {\n  console.log(message);\n  return <h1 className={s.message}>{message}</h1>;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"FilmErrorView_message__3f_h2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"HomePage_header__8xziP\"};","import { useState, useEffect } from 'react';\n// import Navigation from '../Navigation/Navigation';\nimport styles from './HomePage.module.css';\nimport Navigation from '../../Navigation/Navigation';\nimport FilmGalleryView from '../FilmGalleryView/FilmGalleryView';\nimport FilmErrorView from '../FilmErrorView/FilmErrorView';\nimport { fetchTrendingMovies } from '../../services/movies-api';\nimport FilmPendingView from '../FilmPendingView/FilmPendingView';\n\nconst Status = {\n  PENDING: 'pending',\n  REJECTED: 'rejected',\n  RESOLVED: 'resolved',\n};\n\nexport default function HomePage() {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.PENDING);\n\n  useEffect(() => {\n    if (movies === []) {\n      return;\n    }\n    setStatus(Status.PENDING);\n    fetchTrendingMovies()\n      .then(({ results }) => {\n        if (results) {\n          setStatus(Status.RESOLVED);\n          setMovies(results);\n        } else {\n          return Promise.reject(new Error('Sorry, no Trend movies available'));\n        }\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, []);\n\n  console.log(movies);\n  // console.log(status);\n\n  if (status === Status.PENDING) {\n    return <FilmPendingView />;\n  }\n\n  if (status === Status.REJECTED) {\n    return <FilmErrorView message={error.message} />;\n  }\n\n  if (status === Status.RESOLVED) {\n    // console.log('Сработал Resolved');\n    return (\n      <>\n        <header className={styles.header}>Trending Today</header>\n        {movies && (\n          <FilmGalleryView className={styles.gallery} movies={movies} />\n        )}\n      </>\n    );\n  }\n\n  // return (\n  //   <>\n  //     <header className={styles.header}>Trending Today</header>\n  //     {movies && <FilmGalleryView className={styles.gallery} movies={movies} />}\n  //   </>\n  // );\n}\n\n// import { useState, useEffect } from 'react';\n// import api from '../Image-api/images-api';\n// import PropTypes from 'prop-types';\n// import ImageErrorView from '../ImageErrorView/ImageErrorView';\n// import ImageGallery from '../ImageGallery/ImageGallery';\n// import ImagePendingView from '../ImagePendingView/ImagePendingView';\n// import Button from '../Button/Button';\n\n// const Status = {\n//   IDLE: 'idle',\n//   PENDING: 'pending',\n//   REJECTED: 'rejected',\n//   RESOLVED: 'resolved',\n// };\n\n// export default function ImageInfo({ searchQuerry }) {\n//   const [images, setImages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [page, setPage] = useState(1);\n//   const [status, setStatus] = useState(Status.IDLE);\n\n//   console.log(searchQuerry);\n\n//   useEffect(() => {\n//     setImages([]);\n//   }, [searchQuerry]);\n\n//   useEffect(() => {\n//     if (!searchQuerry) {\n//       return;\n//     }\n//     setStatus(Status.PENDING);\n\n//     api\n//       .fetchImage(searchQuerry, page)\n//       .then(({ hits }) => {\n//         if (hits.length !== 0) {\n//           setImages(prevState => [...prevState, ...hits]);\n//           setStatus(Status.RESOLVED);\n//         } else {\n//           return Promise.reject(\n//             new Error('Sorry, the requested information was not found'),\n//           );\n//         }\n//       })\n//       .catch(error => {\n//         setError(error);\n//         setStatus(Status.REJECTED);\n//       });\n//   }, [page, searchQuerry]);\n\n//   const onLoadMore = () => {\n//     setPage(prevState => prevState + 1);\n//   };\n\n//   if (status === Status.IDLE) {\n//     return <h1>Please enter your request</h1>;\n//   }\n\n//   if (status === Status.PENDING) {\n//     return <ImagePendingView />;\n//   }\n\n//   if (status === Status.REJECTED) {\n//     return <ImageErrorView message={error.message} />;\n//   }\n\n//   if (status === Status.RESOLVED) {\n//     return (\n//       <>\n//         <ImageGallery images={images} />\n//         {images && <Button onClick={onLoadMore} page={page} />}\n//       </>\n//     );\n//   }\n// }\n\n// ImageInfo.propTypes = {\n//   searchQuerry: PropTypes.string.isRequired,\n// };\n"],"sourceRoot":""}